!function (e) { CustomFile = function (i, t) { this.elem = e(i), this.itemFileList = [], this.defaults = { type: "all", allowed: "all", notAllowed: [], addContainerAfter: e(i), multiple: !0, maxFiles: 5, maxMB: 0, maxKBperFile: 2048, fileWrapper: '<div class="cif-parent"></div>', filePicker: '<h3>Soltar archivos aquí</h3><p>o clic para seleccionar desde carpeta</p><div class="cif-icon-picker"></div>', image: { crop: !1, preview: { display: !0, maxWidth: 300 }, cropSize: [320, 225], minSize: [0, 0], maxSize: [0, 0] }, messages: { errorType: "Tipo de archivo no permitido", errorMaxMB: "Peso máximo de archivos acumulado excedido", errorFileKB: "Archivo muy pesado", errorMaxFiles: "Cantidad máxima de archivos alcanzada", errorBigImage: "Imagen muy grande", errorSmallImage: "Imagen muy pequeña", errorOnReading: "Aplicación ocupada. Inténtelo más tarde.", errorMultipleDisable: "Suelte un archivo por vez.", errorMaxFileName: "Se permiten 90 caracteres máximos en el nombre del archivo" }, popup: { active: !0, autoclose: !0, delay: 1e4 }, callbacks: { onComplete: function (e) { }, beforeRead: function (e) { }, onSuccess: function (e, i) { }, onError: function (e, i) { }, beforeRemove: function (e) { } } }, this.settings = e.extend(!0, {}, this.defaults, t), this.status = "stop", this.init() }, CustomFile.prototype = { init: function () { if ("" == (t = this.elem.attr("name"))) var t = "inputfile"; this.name = -1 === t.indexOf("[]", t - 2) ? t + "[]" : t, this.form = this.elem.parents("form"), this.container = e('<div class="cif-file-container cif-container-' + this.settings.type + '-type">'); var s = this.settings.image; if (s.minSize = "object" != typeof s.minSize || 2 !== s.minSize.length ? [0, 0] : s.minSize, s.crop) { var a = []; for (i = 0; i < s.minSize.length; i++) { var n = s.minSize[i] > s.cropSize[i] ? s.minSize[i] : s.cropSize[i]; a.push(n) } s.minSize = a } this.setFileWrapper(), this.appendContainer(), this.filePicker = new FilePicker(this), e.customFile.elements.push(this) }, onSuccess: function (e, i) { this.itemFileList.push(e), !1 !== this.settings.callbacks.onSuccess(e, i) && i() }, onError: function (i, t) { this.settings.callbacks.onError(i, t); var s = this.settings.popup; if (s.active) for (k = 0; k < t.length; k++) { var a = i.name.substr(i.name.lastIndexOf(".") + 1); if ((n = i.name.substr(0, i.name.lastIndexOf("."))).length > 42) var n = n.substr(0, 40) + "..."; t[k] += " (" + n + "." + a + ")", e.customFile.popup.add(t[k], s.autoclose, s.delay, "error") } }, onComplete: function () { if (this.status = "completed", this.settings.multiple) { var i = this.checkMaxFiles(), t = this.settings.popup; i && t.active && e.customFile.popup.add(i, t.autoclose, t.delay, "ok") } else this.itemFileList.length > 1 && this.itemFileList[0].destroy(); this.settings.callbacks.onComplete(this) }, read: function (e, i) { var t = i; if (t + 1 > e.length && (this.status = "completed"), "completed" === this.status) return this.onComplete(), !1; if (!1 === this.settings.callbacks.beforeRead(e[t])) return this.read(e, t + 1); if (app = this, "string" == typeof (n = app.checkMaxFiles(e[t]))) return this.onError(e[t], [n]), this.read(e, t + 1); var s = [], a = ["checkFileKB", "checkFileType", "checkTotalMB"]; for (j = 0; j < a.length; j++) { var n; (n = app[a[j]](e[t])) && s.push(n) } if (s.length > 0) return this.onError(e[t], s), this.read(e, t + 1); new FileItem(this, e, t) }, appendContainer: function () { var e = this.settings; 0 != e.fileWrapper.parent().length && e.appendAfter != this.elem && (e.addContainerAfter = e.fileWrapper), e.addContainerAfter.after(this.container) }, setFileWrapper: function () { var i, t = this; if ("string" == typeof (i = this.settings.fileWrapper) && (this.settings.fileWrapper = e(i)), this.settings.fileWrapper = e("<div>", { class: "cif-file-row" }).append(this.settings.fileWrapper), (i = this.settings.fileWrapper).find(":input").each(function (i) { var s = e(this); if (!(a = s.attr("name"))) var a = t.name.substr(0, t.name.indexOf("[]", -2)) + "-" + i; -1 === a.indexOf("[]", -2) && s.attr("name", a + "[]") }), 0 == i.find(".cif-img").length && "image" == this.settings.type) { if (0 === (s = i.find(".cif-parent")).length) { var s, a = i.find("img"); (s = e("<div>", { class: "cif-parent" })).append(a), i.append(s) } 0 === s.find("img").length && s.append("<img>"), s.find("img").addClass("cif-img") } 0 == i.find(".cif-parent").length && i.prepend('<div class="cif-parent"></div>') }, checkFileKB: function (e) { if (e.size > 1024 * this.settings.maxKBperFile && 0 != this.settings.maxKBperFile) var i = this.settings.messages.errorFileKB; return i }, checkFileType: function (e) { var i = (i = e.name.substr(e.name.lastIndexOf(".") + 1)).toLowerCase(); if ("image" == this.settings.type && this.settings.image.crop && -1 == ["jpeg", "jpg", "png"].indexOf(i) || "image" == this.settings.type && !e.type.match(/image\//) || "all" != this.settings.allowed && -1 == this.settings.allowed.indexOf(i) || -1 != this.settings.notAllowed.indexOf(i)) var t = this.settings.messages.errorType; else if (e.name.length > 90) t = this.settings.messages.errorMaxFileName; return t }, checkMaxFiles: function (e) { if (this.settings.maxFiles <= this.itemFileList.length && this.settings.maxFiles) { var i = this.settings.messages.errorMaxFiles; this.filePicker.btn.addClass("inactive") } else this.filePicker.btn.removeClass("inactive"); return i }, checkTotalMB: function (e) { var i = void 0 !== e ? e.size : 0, t = 0; for (var s in this.itemFileList) t += this.itemFileList[s].file.size; if (i + t > 1024 * this.settings.maxMB * 1024 && 0 != this.settings.maxMB) var a = this.settings.messages.errorMaxMB; return a }, checkImageSize: function (e, i) { var t = this.settings.image; if (t.minSize[0] && e.width < t.minSize[0] || t.minSize[1] && e.height < t.minSize[1]) { var s = this.settings.messages.errorSmallImage; t.minSize[0] && (s += " Ancho mínimo:" + t.minSize[0] + "px."), t.minSize[1] && (s += " Alto mínimo: " + t.minSize[1] + "px.") } if (t.maxSize[0] && e.width > t.maxSize[0] || t.maxSize[1] && e.height > t.maxSize[1]) { s = this.settings.messages.errorBigImage; t.maxSize[0] && (s += " Ancho máximo:" + t.maxSize[0] + "px."), t.maxSize[1] && (s += " Alto máximo: " + t.maxSize[1] + "px.") } return s } }, FilePicker = function (i) { this.btn = e('<div class="cif-file-picker"></div>').append(i.settings.filePicker), this.init(i) }, FilePicker.prototype = { init: function (i) { var t = i.settings.multiple || "multiple" == i.elem.attr("multiple") ? 'multiple="multiple"' : " "; this.inputHidden = e('<input type="file" ' + t + ' accept=".pdf, .jpg, .png" />'), i.elem.after(this.btn); var s = i.elem.clone(); i.elem.detach(), i.elem = s, this.btn.addClass("cif-pkr-" + i.elem.attr("name")); var a = this.btn, n = this.inputHidden; n.change(function () { var t = i.settings.popup; if ("reading" == i.status) return e.customFile.popup.add(i.settings.messages.errorOnReading, t.autoclose, t.delay, "error"); e.customFile.popup.close(), fileList = e(this)[0].files, i.status = "reading", i.read(fileList, 0) }), a.on({ click: function () { return e(this).is(".inactive") || n.click(), !1 }, dragover: function (i) { return (i = i || window.event).preventDefault(), e(this).is(".inactive") && (i.dataTransfer.dropEffect = "none"), a.addClass("dragover"), !1 }, dragleave: function (e) { return a.removeClass("dragover"), !1 }, drop: function (t) { (t = window.event).preventDefault(), a.removeClass("dragover"); var s = i.settings.popup; if ("reading" == i.status) return e.customFile.popup.add(i.settings.messages.errorOnReading, s.autoclose, s.delay, "error"); e.customFile.popup.close(); var n = t.dataTransfer.files; if (n.length > 1 && !i.settings.multiple) return e.customFile.popup.add(i.settings.messages.errorMultipleDisable, s.autoclose, s.delay, "error"); i.status = "reading", i.read(n, 0) } }) } }, FileItem = function (e, i, t) { this.file = i[t], this.app = e, this.fileList = i, this.currentItem = t, this.init() }, FileItem.prototype = { init: function () { this.jcropObj = null, this.node = this.app.settings.fileWrapper.clone(), this.img = null, this.btnClose = e('<div class="cif-close" title="Remove">close</div>'), this.btnClose.click(function () { s.destroy() }), this.fr = new FileReader; var i = this.fr, t = this.app, s = this, a = this.fileList, n = this.currentItem, r = function () { t.onSuccess(s, function () { t.read(a, n + 1) }), delete s.fr, delete s.fileList, delete s.currentItem }; i.onload = function () { switch (t.settings.type) { case "image": s.readImage(r); break; default: s.readAllTypes(r) } }, i.readAsDataURL(this.file) }, destroy: function () { this.app.settings.callbacks.beforeRemove(this), this.node && this.node.remove(); var e = this.app.itemFileList.indexOf(this); this.app.itemFileList.splice(e, 1), this.app.checkMaxFiles() }, serialize: function () { return e.customFile.serialize([{ key: this.app.name, value: this.file }]) }, readImage: function (e) { var i = this, t = this.fr, s = this.app, a = i.node.find("img.cif-img"); i.img = new Image, i.img.src = t.result, i.img.onload = function () { if (msg = s.checkImageSize(i.img, i.file), msg) return s.onError(i.file, [msg]), s.read(i.fileList, i.currentItem + 1); a.attr("src", t.result), a.parent().prepend(i.btnClose), s.container.append(i.node), !0 === s.settings.image.crop && (i.jcropObj = i.initJcrop(s.settings.image, a.parent(), i.img, s.name)), e() } }, readAllTypes: function (i) { fileObj = this; var t = fileObj.node.find(".cif-parent"), s = fileObj.file.name.substr(fileObj.file.name.lastIndexOf(".") + 1); if ((a = fileObj.file.name.substr(0, fileObj.file.name.lastIndexOf("."))).length > 42) var a = a.substr(0, 40) + "..."; var n = fileObj.file.size < 102400 ? (fileObj.file.size / 1024).toFixed(2) : Math.round(fileObj.file.size / 1024); t.append(e('<div class="cif-all-type">' + a + "." + s + ' <span class="cif-file-size">(' + n + "KB)</span><div>")).append(fileObj.btnClose), this.app.container.append(fileObj.node), i() }, initJcrop: function (e, i, t, s) { var a, n, r; e.preview.display && (s = s.replace("[]", ""), prevMaxWidth = e.preview.maxWidth, prevSize = e.cropSize[0] > prevMaxWidth ? [prevMaxWidth, e.cropSize[1] / e.cropSize[0] * prevMaxWidth] : e.cropSize, i.append('<div class="preview-pane" style="width:' + prevSize[0] + "px;height:" + prevSize[1] + 'px;"><div class="preview-container" style="width:' + prevSize[0] + "px;height:" + prevSize[1] + 'px; overflow:hidden"><img src="' + t.src + '" class="jcrop-preview im-prv" /></div></div> <input type="hidden" class="jcropx" name="' + s + '-x[]" /><input type="hidden" class="jcropy" name="' + s + '-y[]" /><input type="hidden" class="jcropw" name="' + s + '-w[]" /><input type="hidden" class="jcroph" name="' + s + '-h[]" />'), i.css("min-height", prevSize[1] + 20 + "px")); var o = i.find(".preview-pane"), p = o.find(".preview-container"), l = o.find(".preview-container img"), c = p.width(), f = p.height(); function m(t) { if (parseInt(t.w) > 0 && e.preview.display) { var s = c / t.w, a = f / t.h; l.css({ width: Math.round(s * n) + "px", height: Math.round(a * r) + "px", marginLeft: "-" + Math.round(s * t.x) + "px", marginTop: "-" + Math.round(a * t.y) + "px" }) } var o; o = t, i.find(".jcropx").val(o.x), i.find(".jcropy").val(o.y), i.find(".jcropw").val(o.w), i.find(".jcroph").val(o.h) } return api = i.find(".cif-img").Jcrop({ keySupport: !1, onChange: m, onSelect: m, aspectRatio: e.cropSize[0] / e.cropSize[1], minSize: e.cropSize, trueSize: [t.width, t.height] }, function () { var i = this.getBounds(); n = i[0], r = i[1], (a = this).animateTo([0, 0, e.cropSize[0]]), o.appendTo(a.ui.holder) }), a } }, e.customFile = { elements: [], getElements: function (t) { var s = [], a = (t = t.split(","), e.customFile.elements); for (k = 0; k < t.length; k++)for (t[k] = t[k].trim(), i = 0; i < a.length; i++)a[i].name !== t[k] + "[]" && a[i].name !== t[k] || s.push({ type: "pseudoinput", obj: a[i] }), e(t[k]).is("form") && e(t[k]).each(function () { s.push({ type: "form", obj: e(this), pseudoChild: a[i].form[0] === e(this)[0] }) }), e(t[k]).is(":input") && e(t[k]).not(":submit").each(function () { s.push({ type: "input", obj: e(this) }) }); var n = []; for (i = 0; i < s.length; i++)if (-1 === n.indexOf(i)) for (j = 0; j < s.length; j++)if (j !== i && -1 === n.indexOf(j)) switch (s[i].type) { case "form": ((a = s[i].obj[0]) === s[j].obj[0] || "pseudoinput" === s[j].type && a == s[j].obj.form[0] || "input" === s[j].type && a == s[j].obj.parents("form")[0]) && n.push(j); break; case "input": (a = s[i].obj[0]) === s[j].obj[0] && n.push(j); break; case "pseudoinput": (a = s[i].obj.name) !== s[j].obj.name && a + "[]" !== s[j].obj.name || n.push(j) }var r = []; for (i = 0; i < s.length; i++)-1 === n.indexOf(i) && r.push(s[i]); return r }, serialize: function (i) { if (formData = null, "object" == typeof i) { if (formData = formData || new FormData, !i.length) i = [i]; for (j = 0; j < i.length; j++)i[j].hasOwnProperty("key") && i[j].hasOwnProperty("value") && formData.append(i[j].key, i[j].value) } if ("string" == typeof i) for (i = this.getElements(i), j = 0; j < i.length; j++) { formData = formData || new FormData; var t = i[j]; switch (t.type) { case "pseudoinput": e.each(t.obj.itemFileList, function (e, i) { formData.append(t.obj.name, i.file) }); break; case "form": e.each(t.obj.find(":input"), function () { e(this).not(":submit") && formData.append(e(this).attr("name"), e(this).val()) }); var s = t.obj.data("appCustomFile"); void 0 === s && t.obj.data("appCustomFile", []), e.each(s, function () { appThis = this, e.each(appThis.itemFileList, function (e, i) { formData.append(appThis.name, i.file) }) }); break; case "input": formData.append(t.obj.attr("name"), t.obj.val()) } } return formData }, ajax: function (i, t) { if ("string" == typeof i) { var s = this.getElements(i)[0]; switch (s.type) { case "form": var a = s.obj.attr("action"); break; case "input": a = s.obj.parents("form").attr("action"); break; case "pseudoinput": a = s.obj.form.attr("action") }var n = e.customFile.serialize(i) } if ("object" == typeof i && i instanceof FileItem) n = i.serialize(), a = i.app.form.attr("action"); var r = { cache: !1, contentType: !1, data: n, processData: !1, url: a, type: "POST", progressBar: { active: !0, markup: '<div class="cf-progressbar-wr"><div class="cf-progressbar"><span width="0"></span></div></div>', appendTo: e("body"), removeAfterComplete: !0, node: null }, progress: function (e, i, t, s) { this.progressBar.node.find("span").width(s + "%") }, xhr: function () { var i = this, t = e.ajaxSettings.xhr(); return t.upload.onprogress = function (e) { var t = (e = e || window.event).position || e.loaded, s = e.totalSize || e.total, a = e.loaded / e.total * 100 + ""; i.progress(e, s, t, a) }, t.upload.onload = function () { i.progressBar.node.find("span").width("100%"), i.progressBar.removeAfterComplete && i.progressBar.node.fadeOut(function () { e(this).remove() }) }, t }, beforeSend: function () { }, complete: function () { }, success: function (e) { } }, o = e.extend(!0, {}, r, t); o.progressBar.active || (o.progress = function () { }), o.progressBar.node = e(o.progressBar.markup); var p = o.beforeSend; o.progressBar.active && (o.beforeSend = function () { p(), o.progressBar.appendTo.append(o.progressBar.node) }), e.ajax(o) }, validate: function (e, i) { for (e = this.getElements(e), j = 0; j < e.length; j++)el = e[j], el.type }, popup: { wrapper: e('<div id="cif-msg-wr"><div class="cif-msg-close">close</div></div>'), open: function () { var i = this; this.wrapper.find(".cif-msg-close").click(function () { i.close() }), e("body").append(i.wrapper) }, add: function (i, t, s, a) { switch (s || (s = 3e3), a) { case "error": var n = '<span class="cif-msg-icon cif-msg-icon-error"></span>'; break; case "ok": n = '<span class="cif-msg-icon cif-msg-icon-ok"></span>'; break; default: n = "" }var r = this; e("body").find(r.wrapper).length < 1 && r.open(), this.wrapper.append('<div class="cif-msg">' + n + i + "</div>"), "undefined" != typeof fftimeout && clearTimeout(fftimeout), t && (fftimeout = setTimeout(function () { r.close() }, s)) }, close: function () { this.wrapper.find(".cif-msg").remove(), this.wrapper.detach() } } }, e.fn.customFile = function (i) { return this.each(function () { if ("input" == e(this)[0].tagName.toLowerCase()) { var t = new CustomFile(this, i); t.form; if (void 0 !== t.form.data("appCustomFile")) (s = t.form.data("appCustomFile")).push(t); else var s = new Array(t); t.form.data("appCustomFile", s) } }) } }(jQuery);